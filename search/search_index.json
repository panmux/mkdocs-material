{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"2020-11-03 Notes - When Using Termux On Android Termux on Android partly brings the power of a linux pc to Android tablets. With Termux, we can run python, php, nodejs, git, etc... and even Ubuntu (GUI via VNC) on one's Android powered devices. Quote from its F-droid: 1 Termux combines powerful terminal emulation with an extensive Linux package collection. Here are some of my notes when using this interesting app. Install Termux I used the F-droid link to install Termux and its plugins. Do these things after the installation This command will ask for storage permission for Termux: termux-setup-storage If you have root access, grant root access: su After that run exit command to log out root, and restart you Termux. Run it 2 times: exit Then update & upgrade packages 1 2 3 pkg update pkg upgrade If you want to add more repositories: pkg install unstable-repo If you have root access: pkg install root-repo Create some config files ~/.bash_profile In your root dir, modify or create this dot file ~/.bash_profile , you can add commands that you want Termux runs upon its starts up. I use this config to change the default Termux dir to my work place dir, and add some alias commands. For example, append these commands to ~/.bash_profile : 1 2 3 4 5 echo -e 'Be midful' cal ; cd ~/storage/shared/myWorkPlace/ alias gitt = 'git add .;git commit -m \"from Termux\";git push;' Note: Android /sdcard/ does not fully support chmod, (partally in /data/media/ ). So you can not run ./file.sh directly. You need to run sh ./file.sh . ~/.nanorc See .nanorc content in this respo ~/.vimrc See .vimrc content in this respo Note when installing package Sometimes when you install a <package name> , it may say that package is not available (mainly because of Internet connection), don't give up easily, you may try again with these commands: 1 2 3 pkg update pkg search <package name> pkg install <package name> Some useful packages Install them one by one with this partten: pkg install <package name> . Or you can put them all together in one command: pkg install <packages name> <package name> 1 2 3 4 5 6 7 8 9 10 11 git python nodejs php-apache nano vim-python wget curl rsync ripgrep poppler All in one command: pkg install git python nodejs php-apache nano vim-python wget curl rsync ripgrep poppler Notes & Guide openssh - generate and add ssh with openssh pkg install openssh Create ~/.ssh dir to store your ssh keys, normally openssh will auto create this dir for you. mkdir -p ~/.ssh Generate ssh key: ssh-keygen -t rsa -b 4096 -C \"email@example.com\" Choose default location to store this key, provide passphrase eval \"$(ssh-agent -s)\" Then immediately run ssh-add -k ~/.ssh/id_rsa Git pkg install git Set up 1 2 3 4 5 git config --global user.name \"Panmux Android\" git config --global user.email \"email@example.com\" git config --global core.editor nano You can add ssh public key to your Github account: https://github.com/settings/ssh/new rg RIPGREP This grep tool is much faster than the ordinary grep. It supports Regex also. pkg install ripgrep This command will search for keyword in the entire current dir (including sub dirs). It is really fast. rg keyword pdftotxt (pkg install poppler) The command will be pdftotxt -enc UTF-8 inputfile.pdf . I use this to convert pdf files to txt which allow me to do index for full text search later. Sometimes, I also use rg keyword to quickly look for a keyword in many txt files inside the dir (and its subdirs also). You can write a bash/shell script to do bulk convert: 1 2 3 4 5 6 7 8 9 10 # Credit: https://gist.github.com/tpaskhalis/214c3976ac08cb809d846e01135d9f5f # Convert all pdf in FOLDER (and its subdirs) to txt FOLDER = /storage/ABC-SDCARD/Android/data/com.termux/files/_eBooks/ find \" $FOLDER \" -name '*.pdf' | while read i ; do echo \"Processing $i \" pdftotext -enc UTF-8 \" $i \" done vim-python On Termux I mainly use nano to edit files. Sometimes I also use vim-python instead of vim . This package will enable vim with python , which allow us tp install many powerful python-powered plugins. Should use plugin manager for vim, here I use vim plug (search it on Github). Add plugins that you want to install to ~/.vimrc . Useful plugins: YouCompleteMe (for auto completion, search it on github, and should clone to the ~/.vim/plugged after that cd to YouCompleteMe and install mannualy with this command: python3 install.py --ts-completer (This plugin is too big to install via vim plugin.) Note --ts-completer is for Javascript family, you can add orther languages at the same time too. In ~/.vimrc I still keep the install command, for later update: 1 2 3 4 5 6 7 8 \" Plugin manager vim-plug https://github.com/junegunn/vim-plug call plug#begin('~/.vim/plugged') Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --ts-completer' } \" Should git clone and install manually with python3 install.py --ts-completer \" --ts-completer is more updated than the tern one call plug#end() Nodejs packages Some useful packages. Install these with npm i -g install <package name> 1 2 3 4 5 express http-server live-server epub-gen prettier Python packages Some useful packages. Install these with pip3 install <package name> 1 2 bs4 eng-to-ipa To install java on Termux Install via this bash: 1 2 3 pkg install wget wget https: //raw.githubusercontent.com/MasterDevX/java/master/installjava && bash installjava When the installation is finished without complaining any errors, and if you get error when running java -version Then try to install tsu (root permission required) then run again with pkg install tsu Then sudo java --version Or another way is, also with root permission, trying this method: 1 2 3 4 5 # from https://github.com/MasterDevX/Termux-Java/issues/7#issuecomment-653526860 su export PATH = /data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets: $PATH export LD_LIBRARY_PATH = /data/data/com.termux/files/usr/lib If this does not work, you can remove these exports by using the below unset command To list all env, run env , you should see a list of env 1 2 unset PATH unset LD_LIBRARY_PATH To auto set this env variables on startup of bash, place the command: 1 2 3 export PATH=/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:$PATH export LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib to /etc/profile.d/myprofile.sh To run a .jar file you can try this command: 1 sudo java -Xmx512M -Xms512M -jar filename.jar -Xmx512M and -Xms512M are to do some settings related to heap size. Google them to learn more.","title":"2020-11-03 Notes - When Using Termux On Android"},{"location":"#2020-11-03-notes-when-using-termux-on-android","text":"Termux on Android partly brings the power of a linux pc to Android tablets. With Termux, we can run python, php, nodejs, git, etc... and even Ubuntu (GUI via VNC) on one's Android powered devices. Quote from its F-droid: 1 Termux combines powerful terminal emulation with an extensive Linux package collection.","title":"2020-11-03 Notes - When Using Termux On Android"},{"location":"#here-are-some-of-my-notes-when-using-this-interesting-app","text":"","title":"Here are some of my notes when using this interesting app."},{"location":"#install","text":"Termux I used the F-droid link to install Termux and its plugins.","title":"Install"},{"location":"#do-these-things-after-the-installation","text":"This command will ask for storage permission for Termux: termux-setup-storage If you have root access, grant root access: su After that run exit command to log out root, and restart you Termux. Run it 2 times: exit Then update & upgrade packages 1 2 3 pkg update pkg upgrade If you want to add more repositories: pkg install unstable-repo If you have root access: pkg install root-repo","title":"Do these things after the installation"},{"location":"#create-some-config-files","text":"","title":"Create some config files"},{"location":"#bash_profile","text":"In your root dir, modify or create this dot file ~/.bash_profile , you can add commands that you want Termux runs upon its starts up. I use this config to change the default Termux dir to my work place dir, and add some alias commands. For example, append these commands to ~/.bash_profile : 1 2 3 4 5 echo -e 'Be midful' cal ; cd ~/storage/shared/myWorkPlace/ alias gitt = 'git add .;git commit -m \"from Termux\";git push;' Note: Android /sdcard/ does not fully support chmod, (partally in /data/media/ ). So you can not run ./file.sh directly. You need to run sh ./file.sh .","title":"~/.bash_profile"},{"location":"#nanorc","text":"See .nanorc content in this respo","title":"~/.nanorc"},{"location":"#vimrc","text":"See .vimrc content in this respo","title":"~/.vimrc"},{"location":"#note-when-installing-package","text":"Sometimes when you install a <package name> , it may say that package is not available (mainly because of Internet connection), don't give up easily, you may try again with these commands: 1 2 3 pkg update pkg search <package name> pkg install <package name>","title":"Note when installing package"},{"location":"#some-useful-packages","text":"Install them one by one with this partten: pkg install <package name> . Or you can put them all together in one command: pkg install <packages name> <package name> 1 2 3 4 5 6 7 8 9 10 11 git python nodejs php-apache nano vim-python wget curl rsync ripgrep poppler All in one command: pkg install git python nodejs php-apache nano vim-python wget curl rsync ripgrep poppler","title":"Some useful packages"},{"location":"#notes-guide","text":"","title":"Notes &amp; Guide"},{"location":"#openssh-generate-and-add-ssh-with-openssh","text":"pkg install openssh Create ~/.ssh dir to store your ssh keys, normally openssh will auto create this dir for you. mkdir -p ~/.ssh Generate ssh key: ssh-keygen -t rsa -b 4096 -C \"email@example.com\" Choose default location to store this key, provide passphrase eval \"$(ssh-agent -s)\" Then immediately run ssh-add -k ~/.ssh/id_rsa","title":"openssh - generate and add ssh with openssh"},{"location":"#git","text":"pkg install git","title":"Git"},{"location":"#set-up","text":"1 2 3 4 5 git config --global user.name \"Panmux Android\" git config --global user.email \"email@example.com\" git config --global core.editor nano You can add ssh public key to your Github account: https://github.com/settings/ssh/new","title":"Set up"},{"location":"#rg-ripgrep","text":"This grep tool is much faster than the ordinary grep. It supports Regex also. pkg install ripgrep This command will search for keyword in the entire current dir (including sub dirs). It is really fast. rg keyword","title":"rg RIPGREP"},{"location":"#pdftotxt-pkg-install-poppler","text":"The command will be pdftotxt -enc UTF-8 inputfile.pdf . I use this to convert pdf files to txt which allow me to do index for full text search later. Sometimes, I also use rg keyword to quickly look for a keyword in many txt files inside the dir (and its subdirs also). You can write a bash/shell script to do bulk convert: 1 2 3 4 5 6 7 8 9 10 # Credit: https://gist.github.com/tpaskhalis/214c3976ac08cb809d846e01135d9f5f # Convert all pdf in FOLDER (and its subdirs) to txt FOLDER = /storage/ABC-SDCARD/Android/data/com.termux/files/_eBooks/ find \" $FOLDER \" -name '*.pdf' | while read i ; do echo \"Processing $i \" pdftotext -enc UTF-8 \" $i \" done","title":"pdftotxt (pkg install poppler)"},{"location":"#vim-python","text":"On Termux I mainly use nano to edit files. Sometimes I also use vim-python instead of vim . This package will enable vim with python , which allow us tp install many powerful python-powered plugins. Should use plugin manager for vim, here I use vim plug (search it on Github). Add plugins that you want to install to ~/.vimrc . Useful plugins: YouCompleteMe (for auto completion, search it on github, and should clone to the ~/.vim/plugged after that cd to YouCompleteMe and install mannualy with this command: python3 install.py --ts-completer (This plugin is too big to install via vim plugin.) Note --ts-completer is for Javascript family, you can add orther languages at the same time too. In ~/.vimrc I still keep the install command, for later update: 1 2 3 4 5 6 7 8 \" Plugin manager vim-plug https://github.com/junegunn/vim-plug call plug#begin('~/.vim/plugged') Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --ts-completer' } \" Should git clone and install manually with python3 install.py --ts-completer \" --ts-completer is more updated than the tern one call plug#end()","title":"vim-python"},{"location":"#nodejs-packages","text":"Some useful packages. Install these with npm i -g install <package name> 1 2 3 4 5 express http-server live-server epub-gen prettier","title":"Nodejs packages"},{"location":"#python-packages","text":"Some useful packages. Install these with pip3 install <package name> 1 2 bs4 eng-to-ipa","title":"Python packages"},{"location":"#to-install-java-on-termux","text":"Install via this bash: 1 2 3 pkg install wget wget https: //raw.githubusercontent.com/MasterDevX/java/master/installjava && bash installjava When the installation is finished without complaining any errors, and if you get error when running java -version Then try to install tsu (root permission required) then run again with pkg install tsu Then sudo java --version Or another way is, also with root permission, trying this method: 1 2 3 4 5 # from https://github.com/MasterDevX/Termux-Java/issues/7#issuecomment-653526860 su export PATH = /data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets: $PATH export LD_LIBRARY_PATH = /data/data/com.termux/files/usr/lib If this does not work, you can remove these exports by using the below unset command To list all env, run env , you should see a list of env 1 2 unset PATH unset LD_LIBRARY_PATH To auto set this env variables on startup of bash, place the command: 1 2 3 export PATH=/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:$PATH export LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib to /etc/profile.d/myprofile.sh To run a .jar file you can try this command: 1 sudo java -Xmx512M -Xms512M -jar filename.jar -Xmx512M and -Xms512M are to do some settings related to heap size. Google them to learn more.","title":"To install java on Termux"},{"location":"2020-11-02-build-apk-online/","text":"Build Android APK online with buddy.works The requirements are: [ ] A Github Account [ ] keytool keytool is used to create keystore to sign APK. install openjdk8 on your system to have keytool keytool is also available on iSH app for iPadOS after we successfully installed openjdk8 [ ] A buddy.works account Register a buddy.works account, I register it with my second Github account. Since you have to allow buddy.works to access both private and public repositories in order to clone them to buddy to build, if you have many private repositories that are private to your company or your organization, it is advisable not to use such critical important account with third party services. Create new project in Buddy.works and clone your Android app project from Git repository. Add Piplines and Choose Build Apk In this step, remember to choose a suitable SDK and Build Tool version. To know which value is suitable, you can check these variables in your git Android project/app/build.grade 1 2 3 4 minSdkVersion targetSdkVersion compileSdkVersion buildToolsVersion Sign your APK Note: If you don't sign your APK app, sometimes the built APK will not be installable. To sign an APK, you need to have a keystore. We can use keytool to generate a keystore See: http://docs.phonegap.com/phonegap-build/signing/android/ 1 keytool -genkey -v -keystore [keystore_name].keystore -alias [alias_name] -keyalg RSA -keysize 2048 -validity 10000 Upload you keystore to File System on Buddy.works and provide your keystore password . After uploaded your keystore , now back to Actions and add Sign Apk action . Fill in what it asks. Run pipeline again Now you can proceed to Run pipline and ignore all the other things. The output will be located in File System 1 app/build/outputs/apk/release/","title":"2020 11 02 build apk online"},{"location":"2020-11-02-build-apk-online/#sign-your-apk","text":"Note: If you don't sign your APK app, sometimes the built APK will not be installable. To sign an APK, you need to have a keystore. We can use keytool to generate a keystore See: http://docs.phonegap.com/phonegap-build/signing/android/ 1 keytool -genkey -v -keystore [keystore_name].keystore -alias [alias_name] -keyalg RSA -keysize 2048 -validity 10000 Upload you keystore to File System on Buddy.works and provide your keystore password . After uploaded your keystore , now back to Actions and add Sign Apk action . Fill in what it asks.","title":"Sign your APK"},{"location":"2020-11-02-build-apk-online/#run-pipeline-again","text":"Now you can proceed to Run pipline and ignore all the other things. The output will be located in File System 1 app/build/outputs/apk/release/","title":"Run pipeline again"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/","text":"Notes When Using iSH on iPadOS After using iSH on iPad for quite a while, I have some notes. iSH is now available on App Store Just in case you are still using iSH through TestFight, it is to inform you that it is now available on App Store. Trick to run iSH background Note: Using cat /dev/location and turned on location service will consume more battery. You may not need this trick at all, you can simply Split View iSH over Safari to achieve the same effect. You can also use phpwin app on iPad for opening offline website. However, if you really need to run it background, for example with python module http.server , try this: Create and chmod executable file runBackground.sh Add these: 1 2 cat /dev/location > /dev/null & python3 -m http.server ~/www/ Now turn on your device Location service in the device setting, and allow iSH use your location while running. Run sh runBacground.sh Now open Safari and access: http://localhost:8000/ Change the port 8080 accordingly to your case. You should stay with Safari while iSH is still running. php and composer To install php and composer on iSH: 1 apk add php7 php7-phar php7-mbstring php7-json php7-openssl Create and chmod 777 installComposer.sh with the below bash script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # This snippet is from: https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md #!/bin/sh EXPECTED_CHECKSUM = \" $( wget -q -O - https://composer.github.io/installer.sig ) \" php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" ACTUAL_CHECKSUM = \" $( php -r \"echo hash_file('sha384', 'composer-setup.php');\" ) \" if [ \" $EXPECTED_CHECKSUM \" ! = \" $ACTUAL_CHECKSUM \" ] then > & 2 echo 'ERROR: Invalid installer checksum' rm composer-setup.php exit 1 fi php composer-setup.php --quiet RESULT = $? rm composer-setup.php exit $RESULT To have the command composer available globally, we move composer.phar to: 1 mv composer.phar /usr/local/bin/composer webserver php with apache An easy ways to install webserver php with apache is via this auto script: 1 2 3 4 5 6 git clone https://github.com/timtim8461/ish-webserver-setup.git cd ish-webserver-setup/ chmod 777 *.sh chmod +x setup.sh chmod +x start.sh ./setup.sh Find php.ini and install SQLite3 extension Enable SQLite3 extension. SQLite3 is shipped with php, so we just need to enable it in the php.ini. However on iSH we may need to install it manually: 1 2 p:~# apk search sqlite3 p:~# apk add php7-sqlite3 We can find php.ini location with these commands: The better way (faster) is: 1 php -i | grep php.ini Or slower one: 1 2 3 p:~# cd / p:/# find . -name 'php.ini' ./etc/php7/php.ini And now we can edit it with nano: 1 p:/# nano /etc/php7/php.ini In nano, press Ctrl + w and find sqlite3 and uncomment ; to enable it. We will get something: 1 2 3 ;extension=sockets extension = sqlite3 ;extension=tidy You may need to restart your server to get SQLite3 extension working. Check again 1 2 3 4 5 p:~# php -i | grep php.ini PHP Warning: Module 'sqlite3' already loaded in Unknown on line 0 Configuration File ( php.ini ) Path = > /etc/php7 Loaded Configuration File = > /etc/php7/php.ini Java javac Install 1 2 apk search openjdk apk add openjdk8 If running java -version yields error, try this command: 1 java -mx512m -version You can now try running a jar file: 1 java -mx512m -jar test.jar If running javac -version yields error 1 2 javac -version ash: javac: not found Try to set these paths: 1 2 3 4 ##### export JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk export PATH=\"$JAVA_HOME/bin:${PATH}\" You can put these commands to: /etc/profile.d/profile.sh to set these vars automatically every time you start up the terminal. If you have a newer version, try updating YOURversion in the above command, like /usr/lib/jvm/YOURversion If things go smooth, you will get response something like: 1 2 javac -version javac 1 .8.0_252 To remove these above path List env with export or env 1 2 env export 1 2 3 export unset JAVA_HOME unset PATH pynvim On iSH (iPad) If pip3 install pynvim yields errors (greenlet) ```include/python3.8/Python.h:11:10: fatal error: limits.h: No such file or directory #include ^ compilation terminated. 1 2 3 4 5 6 Fix: ==== ``` bash apk add --no-cache gcc linux-headers musl-dev","title":"Notes When Using iSH on iPadOS"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#notes-when-using-ish-on-ipados","text":"After using iSH on iPad for quite a while, I have some notes.","title":"Notes When Using iSH on iPadOS"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#ish-is-now-available-on-app-store","text":"Just in case you are still using iSH through TestFight, it is to inform you that it is now available on App Store.","title":"iSH is now available on App Store"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#trick-to-run-ish-background","text":"Note: Using cat /dev/location and turned on location service will consume more battery. You may not need this trick at all, you can simply Split View iSH over Safari to achieve the same effect. You can also use phpwin app on iPad for opening offline website. However, if you really need to run it background, for example with python module http.server , try this: Create and chmod executable file runBackground.sh Add these: 1 2 cat /dev/location > /dev/null & python3 -m http.server ~/www/ Now turn on your device Location service in the device setting, and allow iSH use your location while running. Run sh runBacground.sh Now open Safari and access: http://localhost:8000/ Change the port 8080 accordingly to your case. You should stay with Safari while iSH is still running.","title":"Trick to run iSH background"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#php-and-composer","text":"To install php and composer on iSH: 1 apk add php7 php7-phar php7-mbstring php7-json php7-openssl Create and chmod 777 installComposer.sh with the below bash script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # This snippet is from: https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md #!/bin/sh EXPECTED_CHECKSUM = \" $( wget -q -O - https://composer.github.io/installer.sig ) \" php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" ACTUAL_CHECKSUM = \" $( php -r \"echo hash_file('sha384', 'composer-setup.php');\" ) \" if [ \" $EXPECTED_CHECKSUM \" ! = \" $ACTUAL_CHECKSUM \" ] then > & 2 echo 'ERROR: Invalid installer checksum' rm composer-setup.php exit 1 fi php composer-setup.php --quiet RESULT = $? rm composer-setup.php exit $RESULT To have the command composer available globally, we move composer.phar to: 1 mv composer.phar /usr/local/bin/composer","title":"php and composer"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#webserver-php-with-apache","text":"An easy ways to install webserver php with apache is via this auto script: 1 2 3 4 5 6 git clone https://github.com/timtim8461/ish-webserver-setup.git cd ish-webserver-setup/ chmod 777 *.sh chmod +x setup.sh chmod +x start.sh ./setup.sh","title":"webserver php with apache"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#find-phpini-and-install-sqlite3-extension","text":"Enable SQLite3 extension. SQLite3 is shipped with php, so we just need to enable it in the php.ini. However on iSH we may need to install it manually: 1 2 p:~# apk search sqlite3 p:~# apk add php7-sqlite3 We can find php.ini location with these commands: The better way (faster) is: 1 php -i | grep php.ini Or slower one: 1 2 3 p:~# cd / p:/# find . -name 'php.ini' ./etc/php7/php.ini And now we can edit it with nano: 1 p:/# nano /etc/php7/php.ini In nano, press Ctrl + w and find sqlite3 and uncomment ; to enable it. We will get something: 1 2 3 ;extension=sockets extension = sqlite3 ;extension=tidy You may need to restart your server to get SQLite3 extension working. Check again 1 2 3 4 5 p:~# php -i | grep php.ini PHP Warning: Module 'sqlite3' already loaded in Unknown on line 0 Configuration File ( php.ini ) Path = > /etc/php7 Loaded Configuration File = > /etc/php7/php.ini","title":"Find php.ini and install SQLite3 extension"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#java-javac","text":"Install 1 2 apk search openjdk apk add openjdk8 If running java -version yields error, try this command: 1 java -mx512m -version You can now try running a jar file: 1 java -mx512m -jar test.jar If running javac -version yields error 1 2 javac -version ash: javac: not found Try to set these paths: 1 2 3 4 ##### export JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk export PATH=\"$JAVA_HOME/bin:${PATH}\" You can put these commands to: /etc/profile.d/profile.sh to set these vars automatically every time you start up the terminal. If you have a newer version, try updating YOURversion in the above command, like /usr/lib/jvm/YOURversion If things go smooth, you will get response something like: 1 2 javac -version javac 1 .8.0_252 To remove these above path List env with export or env 1 2 env export 1 2 3 export unset JAVA_HOME unset PATH","title":"Java javac"},{"location":"2020-11-03-iSH-Note-When-Using-iSH/#pynvim","text":"On iSH (iPad) If pip3 install pynvim yields errors (greenlet) ```include/python3.8/Python.h:11:10: fatal error: limits.h: No such file or directory #include ^ compilation terminated. 1 2 3 4 5 6 Fix: ==== ``` bash apk add --no-cache gcc linux-headers musl-dev","title":"pynvim"},{"location":"2020-11-15-Git%20server%20on%20Android/","text":"Set up a Git server on Android I used an open source git server for Android app. https://github.com/panmux/Andoird-Gitrepo I used buddy.works to build this apk and signed with my own keystore. The keystore password key is your nama two times. Note: On Gitrepo app + Create user + Add public key + Create Repositories + Add user to respositories ** You can not clone this respository now. You need to git init first. Git init Enable hotspot and 'Start' ssh server from Gitrepo cd to the the newly created git repo with Termux. 1 2 3 4 5 6 7 8 cd local git init nano Readme.md git add . git commit -m 'initial commit' # panmux is an example user with full pull push permission for 'local' git project git remote add origin ssh://panmux@192.168.43.1:2222/local.git git push origin master Now you can ssh clone this local.git from other devices 1 git clone ssh://panmux@192.168.43.1:2222/local The server seems to work on iPad, On other devide, git push successfully but cannot changes reflected on Android. However, if I clone that repository to another dir, it show my latest commit files.","title":"Set up a Git server on Android"},{"location":"2020-11-15-Git%20server%20on%20Android/#set-up-a-git-server-on-android","text":"I used an open source git server for Android app. https://github.com/panmux/Andoird-Gitrepo I used buddy.works to build this apk and signed with my own keystore. The keystore password key is your nama two times.","title":"Set up a Git server on Android"},{"location":"2020-11-15-Git%20server%20on%20Android/#note","text":"On Gitrepo app + Create user + Add public key + Create Repositories + Add user to respositories ** You can not clone this respository now. You need to git init first.","title":"Note:"},{"location":"2020-11-15-Git%20server%20on%20Android/#git-init","text":"Enable hotspot and 'Start' ssh server from Gitrepo cd to the the newly created git repo with Termux. 1 2 3 4 5 6 7 8 cd local git init nano Readme.md git add . git commit -m 'initial commit' # panmux is an example user with full pull push permission for 'local' git project git remote add origin ssh://panmux@192.168.43.1:2222/local.git git push origin master","title":"Git init"},{"location":"2020-11-15-Git%20server%20on%20Android/#now-you-can-ssh-clone-this-localgit-from-other-devices","text":"1 git clone ssh://panmux@192.168.43.1:2222/local","title":"Now you can ssh clone this local.git from other devices"},{"location":"2020-11-15-Git%20server%20on%20Android/#the-server-seems-to-work-on-ipad","text":"On other devide, git push successfully but cannot changes reflected on Android. However, if I clone that repository to another dir, it show my latest commit files.","title":"The server seems to work on iPad,"},{"location":"2020-11-15-vim-python_termux-youcompleteme-how-to/","text":"Install these requirements 1 2 3 4 termux: pkg install python3 termux: pkg install nodejs termux: pkg install vim-python termux: pkg install cmake Then install Vim Plug (using curl command for unix), something like: 1 curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim Then add these to ~/.vimrc: ====> see the end of this file Then clone YouCompleteMe to ~/.vim/plugged : 1 git clone https://github.com/ycm-core/YouCompleteMe.git ~/.vim/plugged Then manually cd to YouCompleteMe and complie it with 1 python3 install.py --ts-completer The tail --ts-completer enables JS support, can add another lang. If error occur, try below instructions. Troubleshooting-steps-for-ycmd-server-SHUT-DOWN https://github.com/ycm-core/YouCompleteMe/wiki/Troubleshooting-steps-for-ycmd-server-SHUT-DOWN The best way to validate installation is to try and start ycmd manually using the process that YouCompleteMe will use. Do this: 1 2 3 4 5 6 7 $ cd /path/to/YouCompleteMe/third_party/ycmd/ $ cat PYTHON_USED_DURING_BUILDING /some/path/to/python3 $ cp ycmd/default_settings.json . $ [/some/path/to/python3] ycmd --options_file=default_settings.json serving on http://localhost:<some port> I met an error related to atomic Then Google, I found a related discussion here: https://gitter.im/Valloric/YouCompleteMe?at=5c8a13b51fae6423ca81e34c 1 ImportError: dlopen failed: cannot locate symbol \"__atomic_fetch_sub_4\" referenced by \"/data/data/com.termux/files/home/.vim/plugged/YouCompleteMe/third_party/ycmd/ycm_core.so Answer Open 1 2 3 4 Open YouCompleteMe/third_party/ycmd/cpp/ycm/CMakeLists.txt Find target_link_libraries Add atomic to the list Recompile 1 2 3 4 5 6 7 @@ -335,6 +335,7 @@ target_link_libraries( ${PROJECT_NAME} ${PYTHON_LIBRARIES} ${LIBCLANG_TARGET} ${EXTRA_LIBS} **atomic** ) if( LIBCLANG_TARGET ) I delete ~/.cache/pip and recompile with python3 install.py --ts-completer Then it works. Here is my current ~/.vimrc content 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 \"============~/.vimrc content============ \" Enable line numbers, highlighting of current line by default ; syntax \" highlighting is enabled by vim-plug set number set cursorline \" https://github.com/thoughtbot/dotfiles/blob/master/vimrc set encoding = utf-8 \" Leader let mapleader = \" \" set backspace=2 \" Backspace deletes like most programs in insert mode set nobackup set nowritebackup set noswapfile \" http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287 set history=50 set ruler \" show the cursor position all the time set showcmd \" display incomplete commands set incsearch \" do incremental searching set laststatus = 2 \" Always display the status line set autowrite \" Automatically :write before running commands set modelines = 0 \" Disable modelines as a security precaution set nomodeline \" autocmd FileType javascript set omnifunc = javascriptcomplete#CompleteJS \" autocmd FileType php set omnifunc=phpcomplete#CompletePHP \" -------------------------------------------------------------------------------------- \" Plugin manager vim-plug https://github.com/junegunn/vim-plug call plug#begin('~/.vim/plugged') \" Plug 'Shougo/deoplete.nvim' , { 'do' : ':UpdateRemotePlugins' } \" Plug 'dense-analysis/ale' \" Plug 'Valloric/YouCompleteMe' , { 'do' : './install.py --ts-completer' } \" --ts-completer is more updated than the tern none \" Should git clone and install manually with python3 install.py --ts-completer Plug 'ycm-core/YouCompleteMe' , { 'do' : './install.py --ts-completer' } \" Plug 'ycm-core/YouCompleteMe' \" Js prettier \" post install (yarn install | npm install) then load plugin only for editing supported files Plug 'prettier/vim-prettier', { \\ 'do': 'npm install', \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] } call plug#end() \" let g:deoplete#enable_at_startup = 1 \"============Pretier configure ============ \" Max line length that prettier will wrap on: a number or 'auto' ( use \" textwidth). \" default: 'auto' let g:prettier#config#print_width = 'auto' \" number of spaces per indentation level: a number or 'auto' (use \" softtabstop ) \" default: 'auto' let g:prettier#config#tab_width = 2 \" use tabs instead of spaces: true, false, or auto ( use the expandtab setting ) . \" default: 'auto' let g:prettier#config#use_tabs = 'false' \" flow | babylon | typescript | css | less | scss | json | graphql | markdown or empty string \" (let prettier choose). \" default: '' let g:prettier#config#parser = '' \" cli-override|file-override|prefer-file \" default: 'file-override' let g:prettier#config#config_precedence = 'file-override' \" always|never|preserve \" default: 'preserve' let g:prettier#config#prose_wrap = 'preserve' \" css|strict|ignore \" default: 'css' let g:prettier#config#html_whitespace_sensitivity = 'css' \" false|true \" default: 'false' let g:prettier#config#require_pragma = 'false' \" Define the flavor of line endings \" lf | crlf | cr | all \" defaut: 'lf' let g:prettier#config#end_of_line = get(g:, 'prettier#config#end_of_line', 'lf') \" No semi let g:prettier#config#semi = 'false' \" Allow auto formatting for files without \" @format \" or \" @prettier \" tag \" let g:prettier#autoformat_require_pragma = 0 \"https://www.dailysmarty.com/posts/how-to-setup-prettier-with-vim let g:prettier#autoformat = 0 autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync","title":"2020 11 15 vim python termux youcompleteme how to"},{"location":"2020-11-15-vim-python_termux-youcompleteme-how-to/#here-is-my-current-vimrc-content","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 \"============~/.vimrc content============ \" Enable line numbers, highlighting of current line by default ; syntax \" highlighting is enabled by vim-plug set number set cursorline \" https://github.com/thoughtbot/dotfiles/blob/master/vimrc set encoding = utf-8 \" Leader let mapleader = \" \" set backspace=2 \" Backspace deletes like most programs in insert mode set nobackup set nowritebackup set noswapfile \" http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287 set history=50 set ruler \" show the cursor position all the time set showcmd \" display incomplete commands set incsearch \" do incremental searching set laststatus = 2 \" Always display the status line set autowrite \" Automatically :write before running commands set modelines = 0 \" Disable modelines as a security precaution set nomodeline \" autocmd FileType javascript set omnifunc = javascriptcomplete#CompleteJS \" autocmd FileType php set omnifunc=phpcomplete#CompletePHP \" -------------------------------------------------------------------------------------- \" Plugin manager vim-plug https://github.com/junegunn/vim-plug call plug#begin('~/.vim/plugged') \" Plug 'Shougo/deoplete.nvim' , { 'do' : ':UpdateRemotePlugins' } \" Plug 'dense-analysis/ale' \" Plug 'Valloric/YouCompleteMe' , { 'do' : './install.py --ts-completer' } \" --ts-completer is more updated than the tern none \" Should git clone and install manually with python3 install.py --ts-completer Plug 'ycm-core/YouCompleteMe' , { 'do' : './install.py --ts-completer' } \" Plug 'ycm-core/YouCompleteMe' \" Js prettier \" post install (yarn install | npm install) then load plugin only for editing supported files Plug 'prettier/vim-prettier', { \\ 'do': 'npm install', \\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] } call plug#end() \" let g:deoplete#enable_at_startup = 1 \"============Pretier configure ============ \" Max line length that prettier will wrap on: a number or 'auto' ( use \" textwidth). \" default: 'auto' let g:prettier#config#print_width = 'auto' \" number of spaces per indentation level: a number or 'auto' (use \" softtabstop ) \" default: 'auto' let g:prettier#config#tab_width = 2 \" use tabs instead of spaces: true, false, or auto ( use the expandtab setting ) . \" default: 'auto' let g:prettier#config#use_tabs = 'false' \" flow | babylon | typescript | css | less | scss | json | graphql | markdown or empty string \" (let prettier choose). \" default: '' let g:prettier#config#parser = '' \" cli-override|file-override|prefer-file \" default: 'file-override' let g:prettier#config#config_precedence = 'file-override' \" always|never|preserve \" default: 'preserve' let g:prettier#config#prose_wrap = 'preserve' \" css|strict|ignore \" default: 'css' let g:prettier#config#html_whitespace_sensitivity = 'css' \" false|true \" default: 'false' let g:prettier#config#require_pragma = 'false' \" Define the flavor of line endings \" lf | crlf | cr | all \" defaut: 'lf' let g:prettier#config#end_of_line = get(g:, 'prettier#config#end_of_line', 'lf') \" No semi let g:prettier#config#semi = 'false' \" Allow auto formatting for files without \" @format \" or \" @prettier \" tag \" let g:prettier#autoformat_require_pragma = 0 \"https://www.dailysmarty.com/posts/how-to-setup-prettier-with-vim let g:prettier#autoformat = 0 autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync","title":"Here is my current ~/.vimrc content"},{"location":"Fix%20module_not_found%20nodejs%20installed%20via%20nvm%20on%20Ubuntu/","text":"Fix module_not_found nodejs installed via nvm on Ubuntu 20.04.md So you have installed a global module successfully with npm i -g <package> . However when you require it via require('<package>') , it would complain with error code: 'MODULE_NOT_FOUND' . Here is a fix that worked for me. Check whether it is true that the required package is installed globally. npm list -g --depth=0 This command will show which packages are installed globally. Now check these which paths: 1 2 3 4 5 6 d@d1:~/dev/tipitakaAppEdit/code-edit$ which npm /home/user/.nvm/versions/node/v12.18.3/bin/npm d@d1:~/dev/tipitakaAppEdit/code-edit$ which node /home/user/.nvm/versions/node/v12.18.3/bin/node d@d1:~/dev/tipitakaAppEdit/code-edit$ echo $NODE_PATH //empty line The echo $NODE_PATH does show an empty line on my terminal. Append the node_modules to the path returned by which node as follow: from /home/user/.nvm/versions/node/v12.18.3/bin/node to /home/user/.nvm/versions/node/v12.18.3/lib/node_modules Now from your terminal, you can run export NODE_PATH=/home/user/.nvm/versions/node/v12.18.3/lib/node_modules Bonus : To apply this every time you open your terminal, you can create and add the above export command to /etc/profile.d/profile.sh Or append the export command to ~/.bashrc Refresh/reload: source ~/.bashrc Check with one is working for you. Type env","title":"Fix module_not_found nodejs installed via nvm on Ubuntu 20.04.md"},{"location":"Fix%20module_not_found%20nodejs%20installed%20via%20nvm%20on%20Ubuntu/#fix-module_not_found-nodejs-installed-via-nvm-on-ubuntu-2004md","text":"So you have installed a global module successfully with npm i -g <package> . However when you require it via require('<package>') , it would complain with error code: 'MODULE_NOT_FOUND' . Here is a fix that worked for me. Check whether it is true that the required package is installed globally. npm list -g --depth=0 This command will show which packages are installed globally. Now check these which paths: 1 2 3 4 5 6 d@d1:~/dev/tipitakaAppEdit/code-edit$ which npm /home/user/.nvm/versions/node/v12.18.3/bin/npm d@d1:~/dev/tipitakaAppEdit/code-edit$ which node /home/user/.nvm/versions/node/v12.18.3/bin/node d@d1:~/dev/tipitakaAppEdit/code-edit$ echo $NODE_PATH //empty line The echo $NODE_PATH does show an empty line on my terminal. Append the node_modules to the path returned by which node as follow: from /home/user/.nvm/versions/node/v12.18.3/bin/node to /home/user/.nvm/versions/node/v12.18.3/lib/node_modules Now from your terminal, you can run export NODE_PATH=/home/user/.nvm/versions/node/v12.18.3/lib/node_modules Bonus : To apply this every time you open your terminal, you can create and add the above export command to /etc/profile.d/profile.sh Or append the export command to ~/.bashrc Refresh/reload: source ~/.bashrc Check with one is working for you. Type env","title":"Fix module_not_found nodejs installed via nvm on Ubuntu 20.04.md"},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/","text":"Install Eclipse by installer package on Ubuntu 20.04 06 Nov 2020 Eclipse is widely used for Java Developers. You can install other IDE for Eclipse too. I don't want to use snap install eclipse but want to install from its installer. Requirements Require Java 1 sudo apt install openjdk-11-jdk-headless To install it, I followed this instruction: https://askubuntu.com/questions/695382/how-to-install-eclipse-using-its-installer I run with sudo ./eclipse-inst and use and use /opt as installation path. Do not use /root/java-2020-09 this will cause many troubles later. We need to create a desktop file. sudo nano /usr/share/applications/eclipse.desktop Remember to update the desktop file accordingly to your version. Here is mine: 1 2 3 4 5 6 7 8 9 10 11 12 [ Desktop Entry ] Encoding = UTF-8 Name = Eclipse Java IDE Type = Application Exec = /opt/java-2020-09/eclipse/eclipse Terminal = false Icon = /opt/java-2020-09/eclipse/icon.xpm Comment = Integrated Development Environment NoDisplay = false Categories = Development ; IDE ; Name [ en ]= Eclipse Name [ en_US ]= Eclipse When you launch Eclipse from the Applications center by clicking on its icon, if you get error The Eclipse executable launcher was unable to locate its companion shared library You can easily fix it with this one: Remember to replace youruser to your real user. See the explanations here https://askubuntu.com/a/1272660 1 setfacl -R -m u:youruser:rx /root To check ACL permissions were set properly: 1 # getfacl /root Enable autocomplete Follow this instructions https://stackoverflow.com/a/58869184 Go to Windows--> Preference--->Java--->Content Assist--->Enable auto activation (checked) And in Auto activation triggers for java: Insert these chars: 1 ._@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ And also https://stackoverflow.com/a/60235868 Enable (Both places) 1 2 3 Java Non-Type Proposals Java Proposals Java Type Proposals","title":"Install Eclipse by installer package on Ubuntu 20.04"},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/#install-eclipse-by-installer-package-on-ubuntu-2004","text":"06 Nov 2020 Eclipse is widely used for Java Developers. You can install other IDE for Eclipse too. I don't want to use snap install eclipse but want to install from its installer.","title":"Install Eclipse by installer package on Ubuntu 20.04"},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/#requirements","text":"Require Java 1 sudo apt install openjdk-11-jdk-headless","title":"Requirements"},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/#to-install-it-i-followed-this-instruction","text":"https://askubuntu.com/questions/695382/how-to-install-eclipse-using-its-installer I run with sudo ./eclipse-inst and use and use /opt as installation path. Do not use /root/java-2020-09 this will cause many troubles later.","title":"To install it, I followed this instruction:"},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/#we-need-to-create-a-desktop-file","text":"sudo nano /usr/share/applications/eclipse.desktop Remember to update the desktop file accordingly to your version. Here is mine: 1 2 3 4 5 6 7 8 9 10 11 12 [ Desktop Entry ] Encoding = UTF-8 Name = Eclipse Java IDE Type = Application Exec = /opt/java-2020-09/eclipse/eclipse Terminal = false Icon = /opt/java-2020-09/eclipse/icon.xpm Comment = Integrated Development Environment NoDisplay = false Categories = Development ; IDE ; Name [ en ]= Eclipse Name [ en_US ]= Eclipse When you launch Eclipse from the Applications center by clicking on its icon, if you get error The Eclipse executable launcher was unable to locate its companion shared library You can easily fix it with this one: Remember to replace youruser to your real user. See the explanations here https://askubuntu.com/a/1272660 1 setfacl -R -m u:youruser:rx /root To check ACL permissions were set properly: 1 # getfacl /root","title":"We need to create a desktop file."},{"location":"To%20install%20Eclipse%20on%20Ubuntu%2020.04/#enable-autocomplete","text":"Follow this instructions https://stackoverflow.com/a/58869184 Go to Windows--> Preference--->Java--->Content Assist--->Enable auto activation (checked) And in Auto activation triggers for java: Insert these chars: 1 ._@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ And also https://stackoverflow.com/a/60235868 Enable (Both places) 1 2 3 Java Non-Type Proposals Java Proposals Java Type Proposals","title":"Enable autocomplete"},{"location":"mkdocs-material/","text":"Git page with mkdocs-material You are viewing a demo of this repository: https://github.com/vpnry/mkdocs-template mkdocs-material Ctrl + Shift + M + K + D + O + C + S Auto deploy to gh-pages branch with Github Action References: For full documentation visit mkdocs.org . mkdocs-material https://squidfunk.github.io/mkdocs-material/ Create and add this code snippet to YOU RPROJECT DIR/.github/workflows/main.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Create and add this to `YOU RPROJECT DIR/.github/workflows/main.yml` # This code snippet is from (updated master -> main): https://squidfunk.github.io/mkdocs-material/publishing-your-site/ name : ci on : push : branches : # - master does not work! as of 2020 it is renamed as main - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material - run : mkdocs gh-deploy --force Remember to enable Github page for your project and choose gh-pages branch. Your Github page will be something like: https://your_github_username.github.io/project Like the one you are viewing now: https://vpnry.github.io/mkdocs-template Code highlight with pymdownx Javascript highlight line number 3 only 1 2 3 4 5 function hightLightWith ( pymdownx ) { let javascript = \"Code highlight with pymdownx\" const str = javascript + \" and extra css docs/stylesheets/extra.css\" return str } Python and highlight ranges, line: 1-2 5-6 1 2 3 4 5 6 import os print ( \"This line is not highlighted\" ) print ( \"This line is highlighted by adding python hl_lines='2'\" ) def returnYes : return \"yes\" # This line is a comment. keyboard keys Ctrl + Alt + Shift + Del mermaid graph You ned to enable mermaid first in mkdocs.yml 1 2 3 4 References: https://github.com/mermaid-js/mermaid/ https://github.com/squidfunk/mkdocs-material/issues/693#issuecomment-411885426 1 2 3 4 5 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"Git page with mkdocs-material"},{"location":"mkdocs-material/#git-page-with-mkdocs-material","text":"You are viewing a demo of this repository: https://github.com/vpnry/mkdocs-template mkdocs-material Ctrl + Shift + M + K + D + O + C + S","title":"Git page with mkdocs-material"},{"location":"mkdocs-material/#auto-deploy-to-gh-pages-branch-with-github-action","text":"References: For full documentation visit mkdocs.org . mkdocs-material https://squidfunk.github.io/mkdocs-material/ Create and add this code snippet to YOU RPROJECT DIR/.github/workflows/main.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Create and add this to `YOU RPROJECT DIR/.github/workflows/main.yml` # This code snippet is from (updated master -> main): https://squidfunk.github.io/mkdocs-material/publishing-your-site/ name : ci on : push : branches : # - master does not work! as of 2020 it is renamed as main - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip install mkdocs-material - run : mkdocs gh-deploy --force Remember to enable Github page for your project and choose gh-pages branch. Your Github page will be something like: https://your_github_username.github.io/project Like the one you are viewing now: https://vpnry.github.io/mkdocs-template","title":"Auto deploy to gh-pages branch with Github Action"},{"location":"mkdocs-material/#code-highlight-with-pymdownx","text":"Javascript highlight line number 3 only 1 2 3 4 5 function hightLightWith ( pymdownx ) { let javascript = \"Code highlight with pymdownx\" const str = javascript + \" and extra css docs/stylesheets/extra.css\" return str } Python and highlight ranges, line: 1-2 5-6 1 2 3 4 5 6 import os print ( \"This line is not highlighted\" ) print ( \"This line is highlighted by adding python hl_lines='2'\" ) def returnYes : return \"yes\" # This line is a comment. keyboard keys Ctrl + Alt + Shift + Del mermaid graph You ned to enable mermaid first in mkdocs.yml 1 2 3 4 References: https://github.com/mermaid-js/mermaid/ https://github.com/squidfunk/mkdocs-material/issues/693#issuecomment-411885426 1 2 3 4 5 graph TD A[Hard] -->|Text| B(Round) B --> C{Decision} C -->|One| D[Result 1] C -->|Two| E[Result 2]","title":"Code highlight with pymdownx"}]}